{"ast":null,"code":"import SystemZone from \"./zones/systemZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\nlet now = () => Date.now(),\n  defaultZone = \"system\",\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  twoDigitCutoffYear = 60,\n  throwOnInvalid;\n\n/**\r\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\r\n */\nexport default class Settings {\n  /**\r\n   * Get the callback for returning the current timestamp.\r\n   * @type {function}\r\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\r\n   * Set the callback for returning the current timestamp.\r\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\r\n   * @type {function}\r\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\r\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\r\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\r\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\r\n   * Use the value \"system\" to reset this value to the system's time zone.\r\n   * @type {string}\r\n   */\n  static set defaultZone(zone) {\n    defaultZone = zone;\n  }\n\n  /**\r\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\r\n   * The default value is the system's time zone (the one set on the machine that runs this code).\r\n   * @type {Zone}\r\n   */\n  static get defaultZone() {\n    return normalizeZone(defaultZone, SystemZone.instance);\n  }\n\n  /**\r\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\r\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\r\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\r\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\r\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\r\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\r\n   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\r\n   * @type {number}\r\n   */\n  static get twoDigitCutoffYear() {\n    return twoDigitCutoffYear;\n  }\n\n  /**\r\n   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\r\n   * @type {number}\r\n   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century\r\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050\r\n   * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50\r\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50\r\n   */\n  static set twoDigitCutoffYear(cutoffYear) {\n    twoDigitCutoffYear = cutoffYear % 100;\n  }\n\n  /**\r\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\r\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\r\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\r\n   * @return {void}\r\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}","map":{"version":3,"names":["SystemZone","IANAZone","Locale","normalizeZone","now","Date","defaultZone","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","twoDigitCutoffYear","throwOnInvalid","Settings","n","zone","instance","locale","numberingSystem","outputCalendar","cutoffYear","t","resetCaches","resetCache"],"sources":["C:/wepabbi/webappi/webappui/node_modules/luxon/src/settings.js"],"sourcesContent":["import SystemZone from \"./zones/systemZone.js\";\r\nimport IANAZone from \"./zones/IANAZone.js\";\r\nimport Locale from \"./impl/locale.js\";\r\n\r\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\r\n\r\nlet now = () => Date.now(),\r\n  defaultZone = \"system\",\r\n  defaultLocale = null,\r\n  defaultNumberingSystem = null,\r\n  defaultOutputCalendar = null,\r\n  twoDigitCutoffYear = 60,\r\n  throwOnInvalid;\r\n\r\n/**\r\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\r\n */\r\nexport default class Settings {\r\n  /**\r\n   * Get the callback for returning the current timestamp.\r\n   * @type {function}\r\n   */\r\n  static get now() {\r\n    return now;\r\n  }\r\n\r\n  /**\r\n   * Set the callback for returning the current timestamp.\r\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\r\n   * @type {function}\r\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\r\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\r\n   */\r\n  static set now(n) {\r\n    now = n;\r\n  }\r\n\r\n  /**\r\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\r\n   * Use the value \"system\" to reset this value to the system's time zone.\r\n   * @type {string}\r\n   */\r\n  static set defaultZone(zone) {\r\n    defaultZone = zone;\r\n  }\r\n\r\n  /**\r\n   * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.\r\n   * The default value is the system's time zone (the one set on the machine that runs this code).\r\n   * @type {Zone}\r\n   */\r\n  static get defaultZone() {\r\n    return normalizeZone(defaultZone, SystemZone.instance);\r\n  }\r\n\r\n  /**\r\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n  static get defaultLocale() {\r\n    return defaultLocale;\r\n  }\r\n\r\n  /**\r\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n  static set defaultLocale(locale) {\r\n    defaultLocale = locale;\r\n  }\r\n\r\n  /**\r\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n  static get defaultNumberingSystem() {\r\n    return defaultNumberingSystem;\r\n  }\r\n\r\n  /**\r\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n  static set defaultNumberingSystem(numberingSystem) {\r\n    defaultNumberingSystem = numberingSystem;\r\n  }\r\n\r\n  /**\r\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n  static get defaultOutputCalendar() {\r\n    return defaultOutputCalendar;\r\n  }\r\n\r\n  /**\r\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\r\n   * @type {string}\r\n   */\r\n  static set defaultOutputCalendar(outputCalendar) {\r\n    defaultOutputCalendar = outputCalendar;\r\n  }\r\n\r\n  /**\r\n   * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\r\n   * @type {number}\r\n   */\r\n  static get twoDigitCutoffYear() {\r\n    return twoDigitCutoffYear;\r\n  }\r\n\r\n  /**\r\n   * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.\r\n   * @type {number}\r\n   * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century\r\n   * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050\r\n   * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50\r\n   * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50\r\n   */\r\n  static set twoDigitCutoffYear(cutoffYear) {\r\n    twoDigitCutoffYear = cutoffYear % 100;\r\n  }\r\n\r\n  /**\r\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\r\n  static get throwOnInvalid() {\r\n    return throwOnInvalid;\r\n  }\r\n\r\n  /**\r\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\r\n   * @type {boolean}\r\n   */\r\n  static set throwOnInvalid(t) {\r\n    throwOnInvalid = t;\r\n  }\r\n\r\n  /**\r\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\r\n   * @return {void}\r\n   */\r\n  static resetCaches() {\r\n    Locale.resetCache();\r\n    IANAZone.resetCache();\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,MAAM,MAAM,kBAAkB;AAErC,SAASC,aAAa,QAAQ,oBAAoB;AAElD,IAAIC,GAAG,GAAG,MAAMC,IAAI,CAACD,GAAG,EAAE;EACxBE,WAAW,GAAG,QAAQ;EACtBC,aAAa,GAAG,IAAI;EACpBC,sBAAsB,GAAG,IAAI;EAC7BC,qBAAqB,GAAG,IAAI;EAC5BC,kBAAkB,GAAG,EAAE;EACvBC,cAAc;;AAEhB;AACA;AACA;AACA,eAAe,MAAMC,QAAQ,CAAC;EAC5B;AACF;AACA;AACA;EACE,WAAWR,GAAG,GAAG;IACf,OAAOA,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,WAAWA,GAAG,CAACS,CAAC,EAAE;IAChBT,GAAG,GAAGS,CAAC;EACT;;EAEA;AACF;AACA;AACA;AACA;EACE,WAAWP,WAAW,CAACQ,IAAI,EAAE;IAC3BR,WAAW,GAAGQ,IAAI;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACE,WAAWR,WAAW,GAAG;IACvB,OAAOH,aAAa,CAACG,WAAW,EAAEN,UAAU,CAACe,QAAQ,CAAC;EACxD;;EAEA;AACF;AACA;AACA;EACE,WAAWR,aAAa,GAAG;IACzB,OAAOA,aAAa;EACtB;;EAEA;AACF;AACA;AACA;EACE,WAAWA,aAAa,CAACS,MAAM,EAAE;IAC/BT,aAAa,GAAGS,MAAM;EACxB;;EAEA;AACF;AACA;AACA;EACE,WAAWR,sBAAsB,GAAG;IAClC,OAAOA,sBAAsB;EAC/B;;EAEA;AACF;AACA;AACA;EACE,WAAWA,sBAAsB,CAACS,eAAe,EAAE;IACjDT,sBAAsB,GAAGS,eAAe;EAC1C;;EAEA;AACF;AACA;AACA;EACE,WAAWR,qBAAqB,GAAG;IACjC,OAAOA,qBAAqB;EAC9B;;EAEA;AACF;AACA;AACA;EACE,WAAWA,qBAAqB,CAACS,cAAc,EAAE;IAC/CT,qBAAqB,GAAGS,cAAc;EACxC;;EAEA;AACF;AACA;AACA;EACE,WAAWR,kBAAkB,GAAG;IAC9B,OAAOA,kBAAkB;EAC3B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,WAAWA,kBAAkB,CAACS,UAAU,EAAE;IACxCT,kBAAkB,GAAGS,UAAU,GAAG,GAAG;EACvC;;EAEA;AACF;AACA;AACA;EACE,WAAWR,cAAc,GAAG;IAC1B,OAAOA,cAAc;EACvB;;EAEA;AACF;AACA;AACA;EACE,WAAWA,cAAc,CAACS,CAAC,EAAE;IAC3BT,cAAc,GAAGS,CAAC;EACpB;;EAEA;AACF;AACA;AACA;EACE,OAAOC,WAAW,GAAG;IACnBnB,MAAM,CAACoB,UAAU,EAAE;IACnBrB,QAAQ,CAACqB,UAAU,EAAE;EACvB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}