{"ast":null,"code":"import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nlet singleton = null;\n\n/**\r\n * Represents the local zone for this JavaScript environment.\r\n * @implements {Zone}\r\n */\nexport default class SystemZone extends Zone {\n  /**\r\n   * Get a singleton instance of the local zone\r\n   * @return {SystemZone}\r\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new SystemZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"system\";\n  }\n\n  /** @override **/\n  get name() {\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  /** @override **/\n  get isUniversal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, _ref) {\n    let {\n      format,\n      locale\n    } = _ref;\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"system\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}","map":{"version":3,"names":["formatOffset","parseZoneInfo","Zone","singleton","SystemZone","instance","type","name","Intl","DateTimeFormat","resolvedOptions","timeZone","isUniversal","offsetName","ts","format","locale","offset","Date","getTimezoneOffset","equals","otherZone","isValid"],"sources":["C:/wepabbi/webappi/webappui/node_modules/luxon/src/zones/systemZone.js"],"sourcesContent":["import { formatOffset, parseZoneInfo } from \"../impl/util.js\";\r\nimport Zone from \"../zone.js\";\r\n\r\nlet singleton = null;\r\n\r\n/**\r\n * Represents the local zone for this JavaScript environment.\r\n * @implements {Zone}\r\n */\r\nexport default class SystemZone extends Zone {\r\n  /**\r\n   * Get a singleton instance of the local zone\r\n   * @return {SystemZone}\r\n   */\r\n  static get instance() {\r\n    if (singleton === null) {\r\n      singleton = new SystemZone();\r\n    }\r\n    return singleton;\r\n  }\r\n\r\n  /** @override **/\r\n  get type() {\r\n    return \"system\";\r\n  }\r\n\r\n  /** @override **/\r\n  get name() {\r\n    return new Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n  }\r\n\r\n  /** @override **/\r\n  get isUniversal() {\r\n    return false;\r\n  }\r\n\r\n  /** @override **/\r\n  offsetName(ts, { format, locale }) {\r\n    return parseZoneInfo(ts, format, locale);\r\n  }\r\n\r\n  /** @override **/\r\n  formatOffset(ts, format) {\r\n    return formatOffset(this.offset(ts), format);\r\n  }\r\n\r\n  /** @override **/\r\n  offset(ts) {\r\n    return -new Date(ts).getTimezoneOffset();\r\n  }\r\n\r\n  /** @override **/\r\n  equals(otherZone) {\r\n    return otherZone.type === \"system\";\r\n  }\r\n\r\n  /** @override **/\r\n  get isValid() {\r\n    return true;\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,iBAAiB;AAC7D,OAAOC,IAAI,MAAM,YAAY;AAE7B,IAAIC,SAAS,GAAG,IAAI;;AAEpB;AACA;AACA;AACA;AACA,eAAe,MAAMC,UAAU,SAASF,IAAI,CAAC;EAC3C;AACF;AACA;AACA;EACE,WAAWG,QAAQ,GAAG;IACpB,IAAIF,SAAS,KAAK,IAAI,EAAE;MACtBA,SAAS,GAAG,IAAIC,UAAU,EAAE;IAC9B;IACA,OAAOD,SAAS;EAClB;;EAEA;EACA,IAAIG,IAAI,GAAG;IACT,OAAO,QAAQ;EACjB;;EAEA;EACA,IAAIC,IAAI,GAAG;IACT,OAAO,IAAIC,IAAI,CAACC,cAAc,EAAE,CAACC,eAAe,EAAE,CAACC,QAAQ;EAC7D;;EAEA;EACA,IAAIC,WAAW,GAAG;IAChB,OAAO,KAAK;EACd;;EAEA;EACAC,UAAU,CAACC,EAAE,QAAsB;IAAA,IAApB;MAAEC,MAAM;MAAEC;IAAO,CAAC;IAC/B,OAAOf,aAAa,CAACa,EAAE,EAAEC,MAAM,EAAEC,MAAM,CAAC;EAC1C;;EAEA;EACAhB,YAAY,CAACc,EAAE,EAAEC,MAAM,EAAE;IACvB,OAAOf,YAAY,CAAC,IAAI,CAACiB,MAAM,CAACH,EAAE,CAAC,EAAEC,MAAM,CAAC;EAC9C;;EAEA;EACAE,MAAM,CAACH,EAAE,EAAE;IACT,OAAO,CAAC,IAAII,IAAI,CAACJ,EAAE,CAAC,CAACK,iBAAiB,EAAE;EAC1C;;EAEA;EACAC,MAAM,CAACC,SAAS,EAAE;IAChB,OAAOA,SAAS,CAACf,IAAI,KAAK,QAAQ;EACpC;;EAEA;EACA,IAAIgB,OAAO,GAAG;IACZ,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}